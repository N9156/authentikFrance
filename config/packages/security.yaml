security:
    # declaration de l'encodeur, on précise à symfony que nous allons encoder un parametre dans la classe/Entity User (password)
    # on precise le type d'encodage(bcrypt)
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }

        in_database:
            entity:
                class: App\Entity\User
                property: mail

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy
            provider: in_database

            form_login:
                login_path: security_login
                check_path: security_login

             #on indique la route permettant de se deconnecter
            logout:
                path: security_logout
                target: authentik
                #une fois deconnecter cela redirige automatiquement vers la page des sitesTouristiques

    # on indique à symfony que les utilisateurs ayant un ROLE_ADMIN, donc les administrateurs du site ont aussi un ROLE_USER, ils ont
    # acces à l'ensemble du site BACK + FRONT
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/profile, roles: [ROLE_USER, ROLE_PRO] }

